Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
dt_model = DecisionTreeClassifier()
train_and_evaluate(dt_model, df_x_subset, df_y_40, train_size=336, test_size=168)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyboardInterrupt[0m                         Traceback (most recent call last)
Cell [0;32mIn[42], line 2[0m
[1;32m      1[0m dt_model [38;5;241m=[39m DecisionTreeClassifier()
[0;32m----> 2[0m [43mtrain_and_evaluate[49m[43m([49m[43mdt_model[49m[43m,[49m[43m [49m[43mdf_x_subset[49m[43m,[49m[43m [49m[43mdf_y_40[49m[43m,[49m[43m [49m[43mtrain_size[49m[38;5;241;43m=[39;49m[38;5;241;43m336[39;49m[43m,[49m[43m [49m[43mtest_size[49m[38;5;241;43m=[39;49m[38;5;241;43m168[39;49m[43m)[49m

Cell [0;32mIn[40], line 57[0m, in [0;36mtrain_and_evaluate[0;34m(model, df_x, df_y, train_size, test_size)[0m
[1;32m     54[0m     splits[38;5;241m.[39mappend(([38;5;28mlist[39m(train_index), [38;5;28mlist[39m(test_index)))
[1;32m     56[0m [38;5;66;03m# Perform cross-validation.[39;00m
[0;32m---> 57[0m cv_res [38;5;241m=[39m [43mcross_validate[49m[43m([49m[43mmodel[49m[43m,[49m[43m [49m[43mdf_x[49m[43m,[49m[43m [49m[43mdf_y[49m[38;5;241;43m.[39;49m[43msqueeze[49m[43m([49m[43m)[49m[43m,[49m[43m [49m[43mcv[49m[38;5;241;43m=[39;49m[43msplits[49m[43m,[49m[43m [49m[43mscoring[49m[38;5;241;43m=[39;49m[43mscorer[49m[43m)[49m
[1;32m     59[0m [38;5;66;03m# Print evaluation metrics.[39;00m
[1;32m     60[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m================================================[39m[38;5;124m"[39m)

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:266[0m, in [0;36mcross_validate[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)[0m
[1;32m    263[0m [38;5;66;03m# We clone the estimator to make sure that all the folds are[39;00m
[1;32m    264[0m [38;5;66;03m# independent, and that it is pickle-able.[39;00m
[1;32m    265[0m parallel [38;5;241m=[39m Parallel(n_jobs[38;5;241m=[39mn_jobs, verbose[38;5;241m=[39mverbose, pre_dispatch[38;5;241m=[39mpre_dispatch)
[0;32m--> 266[0m results [38;5;241m=[39m [43mparallel[49m[43m([49m
[1;32m    267[0m [43m    [49m[43mdelayed[49m[43m([49m[43m_fit_and_score[49m[43m)[49m[43m([49m
[1;32m    268[0m [43m        [49m[43mclone[49m[43m([49m[43mestimator[49m[43m)[49m[43m,[49m
[1;32m    269[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m    270[0m [43m        [49m[43my[49m[43m,[49m
[1;32m    271[0m [43m        [49m[43mscorers[49m[43m,[49m
[1;32m    272[0m [43m        [49m[43mtrain[49m[43m,[49m
[1;32m    273[0m [43m        [49m[43mtest[49m[43m,[49m
[1;32m    274[0m [43m        [49m[43mverbose[49m[43m,[49m
[1;32m    275[0m [43m        [49m[38;5;28;43;01mNone[39;49;00m[43m,[49m
[1;32m    276[0m [43m        [49m[43mfit_params[49m[43m,[49m
[1;32m    277[0m [43m        [49m[43mreturn_train_score[49m[38;5;241;43m=[39;49m[43mreturn_train_score[49m[43m,[49m
[1;32m    278[0m [43m        [49m[43mreturn_times[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[1;32m    279[0m [43m        [49m[43mreturn_estimator[49m[38;5;241;43m=[39;49m[43mreturn_estimator[49m[43m,[49m
[1;32m    280[0m [43m        [49m[43merror_score[49m[38;5;241;43m=[39;49m[43merror_score[49m[43m,[49m
[1;32m    281[0m [43m    [49m[43m)[49m
[1;32m    282[0m [43m    [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mtrain[49m[43m,[49m[43m [49m[43mtest[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mcv[49m[38;5;241;43m.[39;49m[43msplit[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mgroups[49m[43m)[49m
[1;32m    283[0m [43m[49m[43m)[49m
[1;32m    285[0m _warn_or_raise_about_fit_failures(results, error_score)
[1;32m    287[0m [38;5;66;03m# For callabe scoring, the return type is only know after calling. If the[39;00m
[1;32m    288[0m [38;5;66;03m# return type is a dictionary, the error scores can now be inserted with[39;00m
[1;32m    289[0m [38;5;66;03m# the correct key.[39;00m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/sklearn/utils/parallel.py:63[0m, in [0;36mParallel.__call__[0;34m(self, iterable)[0m
[1;32m     58[0m config [38;5;241m=[39m get_config()
[1;32m     59[0m iterable_with_config [38;5;241m=[39m (
[1;32m     60[0m     (_with_config(delayed_func, config), args, kwargs)
[1;32m     61[0m     [38;5;28;01mfor[39;00m delayed_func, args, kwargs [38;5;129;01min[39;00m iterable
[1;32m     62[0m )
[0;32m---> 63[0m [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__call__[39;49m[43m([49m[43miterable_with_config[49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/parallel.py:1088[0m, in [0;36mParallel.__call__[0;34m(self, iterable)[0m
[1;32m   1085[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mdispatch_one_batch(iterator):
[1;32m   1086[0m     [38;5;28mself[39m[38;5;241m.[39m_iterating [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_original_iterator [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[0;32m-> 1088[0m [38;5;28;01mwhile[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdispatch_one_batch[49m[43m([49m[43miterator[49m[43m)[49m:
[1;32m   1089[0m     [38;5;28;01mpass[39;00m
[1;32m   1091[0m [38;5;28;01mif[39;00m pre_dispatch [38;5;241m==[39m [38;5;124m"[39m[38;5;124mall[39m[38;5;124m"[39m [38;5;129;01mor[39;00m n_jobs [38;5;241m==[39m [38;5;241m1[39m:
[1;32m   1092[0m     [38;5;66;03m# The iterable was consumed all at once by the above for loop.[39;00m
[1;32m   1093[0m     [38;5;66;03m# No need to wait for async callbacks to trigger to[39;00m
[1;32m   1094[0m     [38;5;66;03m# consumption.[39;00m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/parallel.py:901[0m, in [0;36mParallel.dispatch_one_batch[0;34m(self, iterator)[0m
[1;32m    899[0m     [38;5;28;01mreturn[39;00m [38;5;28;01mFalse[39;00m
[1;32m    900[0m [38;5;28;01melse[39;00m:
[0;32m--> 901[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_dispatch[49m[43m([49m[43mtasks[49m[43m)[49m
[1;32m    902[0m     [38;5;28;01mreturn[39;00m [38;5;28;01mTrue[39;00m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/parallel.py:819[0m, in [0;36mParallel._dispatch[0;34m(self, batch)[0m
[1;32m    817[0m [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39m_lock:
[1;32m    818[0m     job_idx [38;5;241m=[39m [38;5;28mlen[39m([38;5;28mself[39m[38;5;241m.[39m_jobs)
[0;32m--> 819[0m     job [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_backend[49m[38;5;241;43m.[39;49m[43mapply_async[49m[43m([49m[43mbatch[49m[43m,[49m[43m [49m[43mcallback[49m[38;5;241;43m=[39;49m[43mcb[49m[43m)[49m
[1;32m    820[0m     [38;5;66;03m# A job can complete so quickly than its callback is[39;00m
[1;32m    821[0m     [38;5;66;03m# called before we get here, causing self._jobs to[39;00m
[1;32m    822[0m     [38;5;66;03m# grow. To ensure correct results ordering, .insert is[39;00m
[1;32m    823[0m     [38;5;66;03m# used (rather than .append) in the following line[39;00m
[1;32m    824[0m     [38;5;28mself[39m[38;5;241m.[39m_jobs[38;5;241m.[39minsert(job_idx, job)

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/_parallel_backends.py:208[0m, in [0;36mSequentialBackend.apply_async[0;34m(self, func, callback)[0m
[1;32m    206[0m [38;5;28;01mdef[39;00m [38;5;21mapply_async[39m([38;5;28mself[39m, func, callback[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    207[0m     [38;5;124;03m"""Schedule a func to be run"""[39;00m
[0;32m--> 208[0m     result [38;5;241m=[39m [43mImmediateResult[49m[43m([49m[43mfunc[49m[43m)[49m
[1;32m    209[0m     [38;5;28;01mif[39;00m callback:
[1;32m    210[0m         callback(result)

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/_parallel_backends.py:597[0m, in [0;36mImmediateResult.__init__[0;34m(self, batch)[0m
[1;32m    594[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, batch):
[1;32m    595[0m     [38;5;66;03m# Don't delay the application, to avoid keeping the input[39;00m
[1;32m    596[0m     [38;5;66;03m# arguments in memory[39;00m
[0;32m--> 597[0m     [38;5;28mself[39m[38;5;241m.[39mresults [38;5;241m=[39m [43mbatch[49m[43m([49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/parallel.py:288[0m, in [0;36mBatchedCalls.__call__[0;34m(self)[0m
[1;32m    284[0m [38;5;28;01mdef[39;00m [38;5;21m__call__[39m([38;5;28mself[39m):
[1;32m    285[0m     [38;5;66;03m# Set the default nested backend to self._backend but do not set the[39;00m
[1;32m    286[0m     [38;5;66;03m# change the default number of processes to -1[39;00m
[1;32m    287[0m     [38;5;28;01mwith[39;00m parallel_backend([38;5;28mself[39m[38;5;241m.[39m_backend, n_jobs[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_n_jobs):
[0;32m--> 288[0m         [38;5;28;01mreturn[39;00m [func([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m    289[0m                 [38;5;28;01mfor[39;00m func, args, kwargs [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mitems]

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/joblib/parallel.py:288[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[1;32m    284[0m [38;5;28;01mdef[39;00m [38;5;21m__call__[39m([38;5;28mself[39m):
[1;32m    285[0m     [38;5;66;03m# Set the default nested backend to self._backend but do not set the[39;00m
[1;32m    286[0m     [38;5;66;03m# change the default number of processes to -1[39;00m
[1;32m    287[0m     [38;5;28;01mwith[39;00m parallel_backend([38;5;28mself[39m[38;5;241m.[39m_backend, n_jobs[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_n_jobs):
[0;32m--> 288[0m         [38;5;28;01mreturn[39;00m [[43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    289[0m                 [38;5;28;01mfor[39;00m func, args, kwargs [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mitems]

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/sklearn/utils/parallel.py:123[0m, in [0;36m_FuncWrapper.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m    121[0m     config [38;5;241m=[39m {}
[1;32m    122[0m [38;5;28;01mwith[39;00m config_context([38;5;241m*[39m[38;5;241m*[39mconfig):
[0;32m--> 123[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfunction[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:686[0m, in [0;36m_fit_and_score[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)[0m
[1;32m    684[0m         estimator[38;5;241m.[39mfit(X_train, [38;5;241m*[39m[38;5;241m*[39mfit_params)
[1;32m    685[0m     [38;5;28;01melse[39;00m:
[0;32m--> 686[0m         [43mestimator[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mfit_params[49m[43m)[49m
[1;32m    688[0m [38;5;28;01mexcept[39;00m [38;5;167;01mException[39;00m:
[1;32m    689[0m     [38;5;66;03m# Note fit time as time until error[39;00m
[1;32m    690[0m     fit_time [38;5;241m=[39m time[38;5;241m.[39mtime() [38;5;241m-[39m start_time

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/sklearn/tree/_classes.py:889[0m, in [0;36mDecisionTreeClassifier.fit[0;34m(self, X, y, sample_weight, check_input)[0m
[1;32m    859[0m [38;5;28;01mdef[39;00m [38;5;21mfit[39m([38;5;28mself[39m, X, y, sample_weight[38;5;241m=[39m[38;5;28;01mNone[39;00m, check_input[38;5;241m=[39m[38;5;28;01mTrue[39;00m):
[1;32m    860[0m     [38;5;124;03m"""Build a decision tree classifier from the training set (X, y).[39;00m
[1;32m    861[0m 
[1;32m    862[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    886[0m [38;5;124;03m        Fitted estimator.[39;00m
[1;32m    887[0m [38;5;124;03m    """[39;00m
[0;32m--> 889[0m     [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m
[1;32m    890[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m    891[0m [43m        [49m[43my[49m[43m,[49m
[1;32m    892[0m [43m        [49m[43msample_weight[49m[38;5;241;43m=[39;49m[43msample_weight[49m[43m,[49m
[1;32m    893[0m [43m        [49m[43mcheck_input[49m[38;5;241;43m=[39;49m[43mcheck_input[49m[43m,[49m
[1;32m    894[0m [43m    [49m[43m)[49m
[1;32m    895[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/sklearn/tree/_classes.py:379[0m, in [0;36mBaseDecisionTree.fit[0;34m(self, X, y, sample_weight, check_input)[0m
[1;32m    368[0m [38;5;28;01melse[39;00m:
[1;32m    369[0m     builder [38;5;241m=[39m BestFirstTreeBuilder(
[1;32m    370[0m         splitter,
[1;32m    371[0m         min_samples_split,
[0;32m   (...)[0m
[1;32m    376[0m         [38;5;28mself[39m[38;5;241m.[39mmin_impurity_decrease,
[1;32m    377[0m     )
[0;32m--> 379[0m [43mbuilder[49m[38;5;241;43m.[39;49m[43mbuild[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mtree_[49m[43m,[49m[43m [49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43msample_weight[49m[43m)[49m
[1;32m    381[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mn_outputs_ [38;5;241m==[39m [38;5;241m1[39m [38;5;129;01mand[39;00m is_classifier([38;5;28mself[39m):
[1;32m    382[0m     [38;5;28mself[39m[38;5;241m.[39mn_classes_ [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mn_classes_[[38;5;241m0[39m]

[0;31mKeyboardInterrupt[0m: 
KeyboardInterrupt: 

